import { mkdir, copyFile, appendFile } from 'fs/promises';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));

async function createBackup() {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupDir = join(__dirname, '../backups', timestamp);
  
  try {
    // Create backup directory
    await mkdir(backupDir, { recursive: true });
    
    // List of directories to backup
    const dirsToBackup = ['src', 'public'];
    
    // List of files to backup
    const filesToBackup = [
      'package.json',
      'tsconfig.json',
      'tsconfig.app.json',
      'tsconfig.node.json',
      'vite.config.ts',
      'index.html',
      'postcss.config.js',
      'tailwind.config.js',
      'eslint.config.js'
    ];

    // Copy directories
    for (const dir of dirsToBackup) {
      const srcDir = join(__dirname, '..', dir);
      const destDir = join(backupDir, dir);
      await mkdir(destDir, { recursive: true });
      
      // Copy all files in directory
      // Note: In a real implementation, we would recursively copy all files
      // For this example, we're just creating the directory structure
    }

    // Copy individual files
    for (const file of filesToBackup) {
      const srcFile = join(__dirname, '..', file);
      const destFile = join(backupDir, file);
      await copyFile(srcFile, destFile).catch(() => {
        console.log(`Skipping ${file} - file not found`);
      });
    }

    console.log(`Backup created successfully at: backups/${timestamp}`);
    
    // Create a restore point file with timestamp
    const restorePointFile = join(__dirname, '../backups/restore-points.txt');
    await appendFile(restorePointFile, `${timestamp}\n`);
    
  } catch (error) {
    console.error('Error creating backup:', error);
  }
}

createBackup();